name: Sandbox to Production Deployment

on:
  push:
    branches: [ sandbox ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, closed ]
  workflow_dispatch:
    inputs:
      feature:
        description: 'Feature being deployed to production'
        required: true
        type: string
      deploy_lambdas:
        description: 'Deploy Lambda functions'
        required: true
        default: true
        type: boolean
      deploy_tables:
        description: 'Deploy/create tables'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  validate-production-readiness:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          echo "🔍 Ejecutando auditoría de seguridad para producción..."
          npm audit --audit-level high

      - name: Check for console.log statements
        run: |
          echo "🔍 Verificando console.log statements..."
          CONSOLE_COUNT=$(grep -r "console\." src/ --exclude-dir=node_modules | wc -l)
          if [ $CONSOLE_COUNT -gt 0 ]; then
            echo "❌ Se encontraron $CONSOLE_COUNT console.log statements"
            echo "💡 Remueve todos los console.log antes de producción"
            exit 1
          fi
          echo "✅ No se encontraron console.log statements"

      - name: Check for hardcoded credentials
        run: |
          echo "🔍 Verificando credenciales hardcodeadas..."
          if grep -r -i "password.*=" src/ --exclude-dir=node_modules; then
            echo "❌ Se encontraron contraseñas hardcodeadas"
            exit 1
          fi
          echo "✅ No se encontraron credenciales hardcodeadas"

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build

  create-production-pr:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/sandbox' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request to Production
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: .
          base: main
          head: sandbox
          title: "🚀 Deploy sandbox to production - ${{ github.event.head_commit.message }}"
          body: |
            ## 🚀 Deploy from Sandbox to Production
            
            **Feature:** ${{ github.event.inputs.feature || 'Auto-deploy from sandbox' }}
            **Source:** sandbox
            **Target:** main (production)
            
            ### 📋 Changes included:
            - Tested changes from sandbox
            - Security and quality checks passed
            - Ready for production deployment
            
            ### ✅ Pre-deployment checks:
            - [x] Security audit passed
            - [x] No console.log statements
            - [x] No hardcoded credentials
            - [x] Linting passed
            - [x] Type checking passed
            - [x] Tests passed
            - [x] Build successful
            - [x] Sandbox testing completed
            
            ### 🚀 Production deployment will include:
            - [ ] Lambda functions deployment
            - [ ] Database tables creation/update
            - [ ] API Gateway configuration
            - [ ] Frontend deployment
            - [ ] CloudFront invalidation
            - [ ] Health checks
            
            **Auto-generated by GitHub Actions**
          labels: |
            deployment
            production
            auto-generated
            ready-for-review
          assignees: ${{ github.actor }}

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: validate-production-readiness
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Lambda functions to Production
        if: ${{ github.event.inputs.deploy_lambdas == 'true' || github.event_name == 'pull_request' }}
        run: |
          echo "🚀 Desplegando Lambda functions a producción..."
          chmod +x scripts/deploy-lambda-functions.sh
          ./scripts/deploy-lambda-functions.sh prod

      - name: Deploy/Create Database Tables
        if: ${{ github.event.inputs.deploy_tables == 'true' || github.event_name == 'pull_request' }}
        run: |
          echo "🗄️ Desplegando/creando tablas de base de datos..."
          chmod +x scripts/setup-dashboard-tables.sh
          ./scripts/setup-dashboard-tables.sh prod

      - name: Update API Gateway Production
        run: |
          echo "🌐 Actualizando API Gateway producción..."
          chmod +x scripts/setup-api-gateway-prod.sh
          ./scripts/setup-api-gateway-prod.sh

      - name: Deploy frontend to Production
        run: |
          echo "📦 Desplegando frontend a producción..."
          aws s3 sync .next/static s3://onpoint-admin-prod/static --delete
          aws s3 sync public s3://onpoint-admin-prod/ --delete

      - name: Invalidate CloudFront Production
        run: |
          echo "🔄 Invalidando CloudFront producción..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }} \
            --paths "/*"

      - name: Run health checks
        run: |
          echo "🏥 Ejecutando health checks en producción..."
          chmod +x scripts/run-health-checks.sh
          ./scripts/run-health-checks.sh prod

  notify-production-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-to-production]
    if: always()
    steps:
      - name: Notify production deployment status
        run: |
          echo "🔔 Notificando estado del despliegue a producción..."
          if [ "${{ needs.deploy-to-production.result }}" == "success" ]; then
            echo "✅ Despliegue a producción completado exitosamente"
            echo "🚀 Aplicación lista en producción"
            echo "🔗 URL: https://production.d3ts6pwgn7uyyh.amplifyapp.com"
            echo "📊 Health checks: Ejecutados y verificados"
          else
            echo "❌ Despliegue a producción falló"
            echo "🔧 Revisa los logs para más detalles"
            echo "🚨 Revisa la aplicación de producción inmediatamente"
          fi
