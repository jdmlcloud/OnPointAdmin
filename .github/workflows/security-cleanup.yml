name: Security Cleanup & Code Quality

on:
  push:
    branches: [ develop, sandbox, main ]
  pull_request:
    branches: [ main, sandbox ]

env:
  NODE_VERSION: '18'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          echo "üîç Ejecutando auditor√≠a de seguridad..."
          npm audit --audit-level moderate
          echo "‚úÖ Auditor√≠a de seguridad completada"

      - name: Check for hardcoded credentials
        run: |
          echo "üîç Buscando credenciales hardcodeadas..."
          # Buscar patrones de credenciales
          if grep -r -i "password.*=" src/ --exclude-dir=node_modules; then
            echo "‚ùå Se encontraron contrase√±as hardcodeadas"
            exit 1
          fi
          
          if grep -r -i "secret.*=" src/ --exclude-dir=node_modules; then
            echo "‚ùå Se encontraron secretos hardcodeados"
            exit 1
          fi
          
          if grep -r -i "api.*key.*=" src/ --exclude-dir=node_modules; then
            echo "‚ùå Se encontraron API keys hardcodeadas"
            exit 1
          fi
          
          echo "‚úÖ No se encontraron credenciales hardcodeadas"

      - name: Check for console.log statements
        run: |
          echo "üîç Verificando console.log statements..."
          CONSOLE_COUNT=$(grep -r "console\." src/ --exclude-dir=node_modules | wc -l)
          if [ $CONSOLE_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è Se encontraron $CONSOLE_COUNT console.log statements"
            echo "üìã Lista de console.log encontrados:"
            grep -r "console\." src/ --exclude-dir=node_modules
            echo "üí° Considera remover o reemplazar con un logger apropiado"
          else
            echo "‚úÖ No se encontraron console.log statements"
          fi

      - name: Check for TODO/FIXME comments
        run: |
          echo "üîç Verificando comentarios TODO/FIXME..."
          TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK" src/ --exclude-dir=node_modules | wc -l)
          if [ $TODO_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è Se encontraron $TODO_COUNT comentarios TODO/FIXME"
            echo "üìã Lista de comentarios encontrados:"
            grep -r "TODO\|FIXME\|HACK" src/ --exclude-dir=node_modules
          else
            echo "‚úÖ No se encontraron comentarios TODO/FIXME"
          fi

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          echo "üîç Ejecutando linting..."
          npm run lint
          echo "‚úÖ Linting completado"

      - name: Run type checking
        run: |
          echo "üîç Ejecutando verificaci√≥n de tipos..."
          npm run type-check
          echo "‚úÖ Verificaci√≥n de tipos completada"

      - name: Run tests
        run: |
          echo "üîç Ejecutando tests..."
          npm run test
          echo "‚úÖ Tests completados"

  build-verification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          echo "üî® Construyendo aplicaci√≥n..."
          npm run build
          echo "‚úÖ Build completado exitosamente"

      - name: Check build artifacts
        run: |
          echo "üîç Verificando artefactos de build..."
          if [ -d ".next" ]; then
            echo "‚úÖ Directorio .next creado correctamente"
            ls -la .next/
          else
            echo "‚ùå Directorio .next no encontrado"
            exit 1
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, build-verification]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "üîç Verificando resultados de seguridad y calidad..."
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo "Code quality: ${{ needs.code-quality.result }}"
          echo "Build verification: ${{ needs.build-verification.result }}"
          
          if [ "${{ needs.security-scan.result }}" == "success" ] && 
             [ "${{ needs.code-quality.result }}" == "success" ] && 
             [ "${{ needs.build-verification.result }}" == "success" ]; then
            echo "‚úÖ Todas las verificaciones de seguridad y calidad pasaron"
            echo "üöÄ El c√≥digo est√° listo para despliegue"
          else
            echo "‚ùå Algunas verificaciones fallaron"
            echo "üîß Revisa los logs para m√°s detalles"
            exit 1
          fi
