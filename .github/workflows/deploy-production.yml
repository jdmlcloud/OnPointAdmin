name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production

env:
  AWS_REGION: us-east-1
  STAGE: prod
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test

      - name: Run security audit
        run: npm audit --audit-level high

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-prod
          path: .next/

  deploy-lambda:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Lambda functions
        run: |
          echo "üöÄ Desplegando Lambda functions a producci√≥n..."
          chmod +x scripts/deploy-lambda-functions.sh
          ./scripts/deploy-lambda-functions.sh prod

      - name: Update API Gateway
        run: |
          echo "üåê Actualizando API Gateway..."
          chmod +x scripts/setup-api-gateway-prod.sh
          ./scripts/setup-api-gateway-prod.sh

      - name: Run health checks
        run: |
          echo "üè• Ejecutando health checks..."
          chmod +x scripts/run-health-checks.sh
          ./scripts/run-health-checks.sh prod

  deploy-frontend:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3 (CloudFront backup)
        run: |
          echo "üì¶ Desplegando frontend a S3 como respaldo de CloudFront..."
          echo "‚ö†Ô∏è NOTA: El despliegue principal se hace a trav√©s de AWS Amplify"
          aws s3 sync .next/static s3://onpoint-admin-prod/static --delete
          aws s3 sync public s3://onpoint-admin-prod/ --delete

      - name: Invalidate CloudFront (backup)
        run: |
          echo "üîÑ Invalidando CloudFront como respaldo..."
          echo "‚ö†Ô∏è NOTA: El despliegue principal se hace a trav√©s de AWS Amplify"
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  notify:
    needs: [deploy-lambda, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check deployment status
        run: |
          echo "üîç Verificando estado del despliegue..."
          echo "Lambda deployment: ${{ needs.deploy-lambda.result }}"
          echo "Frontend deployment: ${{ needs.deploy-frontend.result }}"
          
          if [ "${{ needs.deploy-lambda.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "‚úÖ Despliegue a producci√≥n completado exitosamente"
            echo "üöÄ Sistema listo para producci√≥n"
          elif [ "${{ needs.deploy-lambda.result }}" == "skipped" ] && [ "${{ needs.deploy-frontend.result }}" == "skipped" ]; then
            echo "‚ö†Ô∏è Despliegue omitido (no es branch main o production)"
          else
            echo "‚ùå Despliegue a producci√≥n fall√≥"
            echo "Lambda: ${{ needs.deploy-lambda.result }}"
            echo "Frontend: ${{ needs.deploy-frontend.result }}"
            exit 1
          fi
