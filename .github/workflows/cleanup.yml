name: Cleanup Resources

on:
  schedule:
    # Ejecutar todos los días a las 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to clean up'
        required: true
        default: 'sandbox'
        type: choice
        options:
        - sandbox
        - production

env:
  AWS_REGION: us-east-1

jobs:
  cleanup-sandbox:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'sandbox')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean up old Lambda versions
        run: |
          echo "🧹 Limpiando versiones antiguas de Lambda functions..."
          aws lambda list-functions --query 'Functions[?contains(FunctionName, `OnPointAdmin`) && contains(FunctionName, `sandbox`)].FunctionName' --output text | while read function; do
            echo "Limpiando $function..."
            aws lambda list-versions-by-function --function-name "$function" --query 'Versions[?Version != `$LATEST` && to_number(Version) < to_number(`$LATEST`) - 5].Version' --output text | while read version; do
              if [ ! -z "$version" ]; then
                echo "Eliminando versión $version de $function"
                aws lambda delete-function --function-name "$function" --qualifier "$version" || true
              fi
            done
          done

      - name: Clean up old CloudWatch logs
        run: |
          echo "🧹 Limpiando logs antiguos de CloudWatch..."
          aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/OnPointAdmin" --query 'logGroups[?contains(logGroupName, `sandbox`)].logGroupName' --output text | while read logGroup; do
            echo "Limpiando $logGroup..."
            aws logs delete-log-group --log-group-name "$logGroup" || true
          done

  cleanup-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean up old Lambda versions
        run: |
          echo "🧹 Limpiando versiones antiguas de Lambda functions..."
          aws lambda list-functions --query 'Functions[?contains(FunctionName, `OnPointAdmin`) && contains(FunctionName, `prod`)].FunctionName' --output text | while read function; do
            echo "Limpiando $function..."
            aws lambda list-versions-by-function --function-name "$function" --query 'Versions[?Version != `$LATEST` && to_number(Version) < to_number(`$LATEST`) - 10].Version' --output text | while read version; do
              if [ ! -z "$version" ]; then
                echo "Eliminando versión $version de $function"
                aws lambda delete-function --function-name "$function" --qualifier "$version" || true
              fi
            done
          done

      - name: Clean up old CloudWatch logs
        run: |
          echo "🧹 Limpiando logs antiguos de CloudWatch..."
          aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/OnPointAdmin" --query 'logGroups[?contains(logGroupName, `prod`)].logGroupName' --output text | while read logGroup; do
            echo "Limpiando $logGroup..."
            aws logs delete-log-group --log-group-name "$logGroup" || true
          done
