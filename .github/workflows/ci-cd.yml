name: CI/CD Pipeline

on:
  push:
    branches: [main, sandbox, frontend-stable]
  pull_request:
    branches: [main, sandbox]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'

jobs:
  # Job de validaci√≥n y testing
  validate:
    name: Validar y Testear
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[test]')
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Instalar dependencias
        run: npm ci
        
      - name: Lint TypeScript
        run: npx tsc --noEmit
        
      - name: Lint c√≥digo
        run: npx eslint src/ --ext .ts,.tsx --max-warnings 0
        
      - name: Verificar estructura de archivos
        run: |
          echo "üîç Verificando estructura del proyecto..."
          ls -la src/app/
          ls -la lambda-functions/
          echo "‚úÖ Estructura verificada"

  # Job de deploy a sandbox
  deploy-sandbox:
    name: Deploy a Sandbox
    runs-on: ubuntu-latest
    needs: validate
    if: |
      github.ref == 'refs/heads/sandbox' || 
      github.ref == 'refs/heads/frontend-stable' ||
      contains(github.event.head_commit.message, '[deploy-sandbox]')
    
    environment: sandbox
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy Lambda Functions
        run: |
          echo "üöÄ Desplegando Lambda functions a sandbox..."
          
          # Deploy Products Lambda
          cd lambda-functions/products
          zip -r products-sandbox.zip index.js package.json
          aws lambda update-function-code \
            --function-name OnPointAdmin-Products-sandbox \
            --zip-file fileb://products-sandbox.zip
          
          # Deploy Users Lambda
          cd ../users
          zip -r users-sandbox.zip index.js package.json
          aws lambda update-function-code \
            --function-name OnPointAdmin-Users-sandbox \
            --zip-file fileb://users-sandbox.zip
            
          echo "‚úÖ Lambda functions desplegadas a sandbox"
          
      - name: Verificar deployment
        run: |
          echo "üîç Verificando deployment en sandbox..."
          aws lambda list-functions --query "Functions[?contains(FunctionName, 'sandbox')].{Name:FunctionName,State:State}" --output table
          
      - name: Test endpoints
        run: |
          echo "üß™ Probando endpoints de sandbox..."
          curl -f https://m4ijnyg5da.execute-api.us-east-1.amazonaws.com/sandbox/products || echo "‚ùå Error en endpoint de productos"
          curl -f https://m4ijnyg5da.execute-api.us-east-1.amazonaws.com/sandbox/users || echo "‚ùå Error en endpoint de usuarios"

  # Job de deploy a producci√≥n (solo manual)
  deploy-production:
    name: Deploy a Producci√≥n
    runs-on: ubuntu-latest
    needs: [validate, deploy-sandbox]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      contains(github.event.head_commit.message, '[deploy-prod]')
    
    environment: production
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy Lambda Functions a Producci√≥n
        run: |
          echo "üöÄ Desplegando Lambda functions a producci√≥n..."
          
          # Deploy Products Lambda
          cd lambda-functions/products
          zip -r products-prod.zip index.js package.json
          aws lambda update-function-code \
            --function-name OnPointAdmin-Products-prod \
            --zip-file fileb://products-prod.zip
          
          # Deploy Users Lambda
          cd ../users
          zip -r users-prod.zip index.js package.json
          aws lambda update-function-code \
            --function-name OnPointAdmin-Users-prod \
            --zip-file fileb://users-prod.zip
            
          echo "‚úÖ Lambda functions desplegadas a producci√≥n"
          
      - name: Verificar deployment de producci√≥n
        run: |
          echo "üîç Verificando deployment en producci√≥n..."
          aws lambda list-functions --query "Functions[?contains(FunctionName, 'prod')].{Name:FunctionName,State:State}" --output table

  # Job de notificaci√≥n
  notify:
    name: Notificar Resultado
    runs-on: ubuntu-latest
    needs: [deploy-sandbox, deploy-production]
    if: always()
    
    steps:
      - name: Notificar √©xito
        if: needs.deploy-sandbox.result == 'success'
        run: |
          echo "‚úÖ Deploy a sandbox exitoso"
          echo "üåê Sandbox URL: https://m4ijnyg5da.execute-api.us-east-1.amazonaws.com/sandbox"
          
      - name: Notificar error
        if: needs.deploy-sandbox.result == 'failure'
        run: |
          echo "‚ùå Deploy a sandbox fall√≥"
          exit 1
