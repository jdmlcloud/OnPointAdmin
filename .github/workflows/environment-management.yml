name: Environment Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno a gestionar'
        required: true
        default: 'sandbox'
        type: choice
        options:
          - sandbox
          - production
      action:
        description: 'Acci√≥n a realizar'
        required: true
        default: 'status'
        type: choice
        options:
          - status
          - deploy
          - rollback
          - cleanup

env:
  AWS_REGION: us-east-1

jobs:
  manage-environment:
    name: Gestionar Entorno
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Verificar estado del entorno
        if: inputs.action == 'status'
        run: |
          echo "üîç Verificando estado del entorno: ${{ inputs.environment }}"
          
          # Verificar Lambda functions
          echo "üì¶ Lambda Functions:"
          aws lambda list-functions \
            --query "Functions[?contains(FunctionName, '${{ inputs.environment }}')].{Name:FunctionName,State:State,LastModified:LastModified}" \
            --output table
            
          # Verificar DynamoDB tables
          echo "üóÑÔ∏è DynamoDB Tables:"
          aws dynamodb list-tables \
            --query "TableNames[?contains(@, '${{ inputs.environment }}')]" \
            --output table
            
          # Verificar API Gateway
          echo "üåê API Gateway:"
          aws apigateway get-rest-apis \
            --query "items[?contains(name, '${{ inputs.environment }}')].{Name:name,Id:id,CreatedDate:createdDate}" \
            --output table
            
      - name: Deploy al entorno
        if: inputs.action == 'deploy'
        run: |
          echo "üöÄ Desplegando al entorno: ${{ inputs.environment }}"
          
          # Deploy Lambda functions
          cd lambda-functions/products
          zip -r products-${{ inputs.environment }}.zip index.js package.json
          aws lambda update-function-code \
            --function-name OnPointAdmin-Products-${{ inputs.environment }} \
            --zip-file fileb://products-${{ inputs.environment }}.zip
            
          cd ../users
          zip -r users-${{ inputs.environment }}.zip index.js package.json
          aws lambda update-function-code \
            --function-name OnPointAdmin-Users-${{ inputs.environment }} \
            --zip-file fileb://users-${{ inputs.environment }}.zip
            
          echo "‚úÖ Deploy completado"
          
      - name: Rollback del entorno
        if: inputs.action == 'rollback'
        run: |
          echo "üîÑ Realizando rollback del entorno: ${{ inputs.environment }}"
          echo "‚ö†Ô∏è Esta funcionalidad requiere implementaci√≥n adicional"
          
      - name: Cleanup del entorno
        if: inputs.action == 'cleanup'
        run: |
          echo "üßπ Limpiando entorno: ${{ inputs.environment }}"
          echo "‚ö†Ô∏è Esta funcionalidad requiere implementaci√≥n adicional"
